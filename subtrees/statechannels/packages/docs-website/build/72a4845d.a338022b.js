(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{227:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return d}));var a=t(2),i=t(6),l=(t(0),t(420)),r=t(425),c={id:"understand-channel-storage",title:"Understand channel storage"},o={unversionedId:"protocol-tutorial/understand-channel-storage",id:"protocol-tutorial/understand-channel-storage",isDocsHomePage:!1,title:"Understand channel storage",description:"The adjudicator contract stores certain information about any channel that it knows about. Specifically, it stores",source:"@site/docs/protocol-tutorial/understand-channel-storage.md",permalink:"/protocol-tutorial/understand-channel-storage",lastUpdatedBy:"Caleb Ditchfield",lastUpdatedAt:1600126133,sidebar:"docs",previous:{title:"Finalize a channel (sad)",permalink:"/protocol-tutorial/finalize-a-channel-sad"},next:{title:"Clear a challenge",permalink:"/protocol-tutorial/clear-a-challenge"}},s=[{value:"<code>turnNumRecord</code>",id:"turnnumrecord",children:[]},{value:"Channel Modes",id:"channel-modes",children:[]}],b={rightToc:s};function d(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"The adjudicator contract stores certain information about any channel that it knows about. Specifically, it stores"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"uint48 turnNumRecord")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"uint48 finalizesAt")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"uint160 fingerprint"))),Object(l.b)("p",null,"serialized, inside the following mapping (with ",Object(l.b)("inlineCode",{parentName:"p"},"channelId")," as the key):"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-solidity"}),"    mapping(bytes32 => bytes32) public channelStorageHashes;\n")),Object(l.b)("p",null,"The value of ",Object(l.b)("inlineCode",{parentName:"p"},"channelStorageHashes[someChannelId]")," is obtained by:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"setting the most significant 48 bits to the ",Object(l.b)("inlineCode",{parentName:"li"},"turnNumRecord")),Object(l.b)("li",{parentName:"ul"},"setting the next most significant 48 bits to ",Object(l.b)("inlineCode",{parentName:"li"},"finalizesAt")),Object(l.b)("li",{parentName:"ul"},"setting the next most significant 160 bits to the ",Object(l.b)("inlineCode",{parentName:"li"},"fingerprint"))),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"fingerprint")," uniquely identifies the channel's current state, up to hash collisions. It is the 160 least significant bits of ",Object(l.b)("inlineCode",{parentName:"p"},"keccak256(abi.encode(channelData))"),", where ",Object(l.b)("inlineCode",{parentName:"p"},"channelData")," is a struct of type"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-solidity"}),"    struct ChannelData {\n        uint256 turnNumRecord;\n        uint256 finalizesAt;\n        bytes32 stateHash; // keccak256(abi.encode(State))\n        address challengerAddress;\n        bytes32 outcomeHash // keccak256(abi.encode(Outcome));\n    }\n")),Object(l.b)("p",null,"When the adjudicator needs to verify the exact state or outcome, the data is provided in the function arguments, as part of the ",Object(l.b)("inlineCode",{parentName:"p"},"calldata"),". The chain will then check that the hydrated data hashes to the image that has been stored."),Object(l.b)("p",null,"We provide a helper function to construct the appropriate hash from a javascript representation of ",Object(l.b)("inlineCode",{parentName:"p"},"ChannelData"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import {ChannelData, channelDataToChannelStorageHash} from '@statechannels/nitro-protocol';\n\nconst channelData: ChannelData = {\n  turnNumRecord: largestTurnNum,\n  finalizesAt: 0x0\n};\nconst channelStorageHash = channelDataToChannelStorageHash(channelData);\n")),Object(l.b)("p",null,"We'll be using this in the next tutorial lesson."),Object(l.b)("h3",{id:"turnnumrecord"},Object(l.b)("inlineCode",{parentName:"h3"},"turnNumRecord")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"turNumRecord")," is the highest turn number that is known to the chain to be supported by a full set of signatures.\nThe exception to this rule is that it is set to ",Object(l.b)("inlineCode",{parentName:"p"},"0")," when the channel is concluded via a ",Object(l.b)("inlineCode",{parentName:"p"},"conclude")," call."),Object(l.b)("p",null,"For example, the ",Object(l.b)("inlineCode",{parentName:"p"},"turnNumRecord")," might be increased by a submitted transaction including"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"a ",Object(l.b)("inlineCode",{parentName:"li"},"validTransition")," m-chain (i.e. an ordered list of ",Object(l.b)("inlineCode",{parentName:"li"},"m <= n")," states such that each state in the list is a valid transition from its predecessor), and"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"n")," signatures such that each participant has signed the state in the m-chain for which they are a mover (or a later one)")),Object(l.b)("p",null,"One example of this is a transaction including a single state signed by all ",Object(l.b)("inlineCode",{parentName:"p"},"n")," participants."),Object(l.b)("p",null,"Note that a new ",Object(l.b)("inlineCode",{parentName:"p"},"validTransition")," ",Object(l.b)("inlineCode",{parentName:"p"},"m"),"-chain may be implied by a single, signed state that is a validTransition from a state already supported on-chain: and hence the ",Object(l.b)("inlineCode",{parentName:"p"},"turnNumRecord")," can be incremented by a ",Object(l.b)("inlineCode",{parentName:"p"},"respond")," transaction."),Object(l.b)("h3",{id:"channel-modes"},"Channel Modes"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Open")," if and only if ",Object(l.b)("inlineCode",{parentName:"li"},"finalizesAt")," is null",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"implies that ",Object(l.b)("inlineCode",{parentName:"li"},"stateHash")," and ",Object(l.b)("inlineCode",{parentName:"li"},"challengerAddress")," are also null"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Challenge")," if and only if ",Object(l.b)("inlineCode",{parentName:"li"},"finalizesAt < currentTime"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"implies that all other fields are not null"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Finalized")," if and only if ",Object(l.b)("inlineCode",{parentName:"li"},"finalizesAt >= currentTime"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"implies that all other fields are not null")))),Object(l.b)("p",null,"These states can be represented in the following state machine:"),Object(l.b)(r.a,{chart:"\ngraph LR\nlinkStyle default interpolate basis\nOpen --\x3e|forceMove| Challenge\nOpen --\x3e|checkpoint| Open\nOpen--\x3e|conclude| Finalized\nChallenge--\x3e|forceMove| Challenge\nChallenge--\x3e|respond| Open\nChallenge--\x3e|checkpoint| Open\nChallenge--\x3e|conclude| Finalized\nChallenge--\x3e|timeout| Finalized",mdxType:"Mermaid"}))}d.isMDXComponent=!0},425:function(e,n,t){"use strict";var a=t(0),i=t.n(a),l=t(438),r=t.n(l);r.a.initialize({startOnLoad:!0});n.a=function(e){var n=e.chart;return Object(a.useEffect)((function(){r.a.contentLoaded()}),[]),i.a.createElement("div",{className:"mermaid",align:"center"},n)}},441:function(e,n,t){var a={"./locale":424,"./locale.js":424};function i(e){var n=l(e);return t(n)}function l(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}i.keys=function(){return Object.keys(a)},i.resolve=l,e.exports=i,i.id=441}}]);