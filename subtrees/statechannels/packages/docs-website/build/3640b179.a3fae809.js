(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{139:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return u}));var n=a(2),r=a(6),b=(a(0),a(420)),l={id:"ForceMove",title:"ForceMove.sol"},c={unversionedId:"contract-api/natspec/ForceMove",id:"contract-api/natspec/ForceMove",isDocsHomePage:!1,title:"ForceMove.sol",description:"View Source: contracts/ForceMove.sol",source:"@site/docs/contract-api/natspec/ForceMove.md",permalink:"/contract-api/natspec/ForceMove",sidebar:"Contract API",previous:{title:"IForceMove.sol",permalink:"/contract-api/natspec/IForceMove"},next:{title:"Adjudicator.sol",permalink:"/contract-api/natspec/Adjudicator"}},i=[{value:"Contract Members",id:"contract-members",children:[]},{value:"Events",id:"events",children:[]},{value:"Functions",id:"functions",children:[{value:"getChannelStorage",id:"getchannelstorage",children:[]},{value:"forceMove",id:"forcemove",children:[]},{value:"respond",id:"respond",children:[]},{value:"checkpoint",id:"checkpoint",children:[]},{value:"conclude",id:"conclude",children:[]},{value:"_requireChallengerIsParticipant",id:"_requirechallengerisparticipant",children:[]},{value:"_isAddressInArray",id:"_isaddressinarray",children:[]},{value:"_validSignatures",id:"_validsignatures",children:[]},{value:"_acceptableWhoSignedWhat",id:"_acceptablewhosignedwhat",children:[]},{value:"_recoverSigner",id:"_recoversigner",children:[]},{value:"_requireStateSupportedBy",id:"_requirestatesupportedby",children:[]},{value:"_requireValidTransitionChain",id:"_requirevalidtransitionchain",children:[]},{value:"_requireValidTransition",id:"_requirevalidtransition",children:[]},{value:"_bytesEqual",id:"_bytesequal",children:[]},{value:"_clearChallenge",id:"_clearchallenge",children:[]},{value:"_requireIncreasedTurnNumber",id:"_requireincreasedturnnumber",children:[]},{value:"_requireNonDecreasedTurnNumber",id:"_requirenondecreasedturnnumber",children:[]},{value:"_requireSpecificChallenge",id:"_requirespecificchallenge",children:[]},{value:"_requireOngoingChallenge",id:"_requireongoingchallenge",children:[]},{value:"_requireChannelNotFinalized",id:"_requirechannelnotfinalized",children:[]},{value:"_requireChannelFinalized",id:"_requirechannelfinalized",children:[]},{value:"_requireChannelOpen",id:"_requirechannelopen",children:[]},{value:"_requireMatchingStorage",id:"_requirematchingstorage",children:[]},{value:"_mode",id:"_mode",children:[]},{value:"_hashChannelData",id:"_hashchanneldata",children:[]},{value:"_getChannelStorage",id:"_getchannelstorage",children:[]},{value:"_matchesHash",id:"_matcheshash",children:[]},{value:"_hashState",id:"_hashstate",children:[]},{value:"_hashOutcome",id:"_hashoutcome",children:[]},{value:"_getChannelId",id:"_getchannelid",children:[]}]}],p={rightToc:i};function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,"View Source: ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/statechannels/monorepo/tree/master/packages/nitro-protocol/contracts/ForceMove.sol"}),"contracts/ForceMove.sol")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"\u2197 Extends: ",Object(b.b)("a",Object(n.a)({parentName:"strong"},{href:"/contract-api/natspec/IForceMove"}),"IForceMove")),"\n",Object(b.b)("strong",{parentName:"p"},"\u2198 Derived Contracts: ",Object(b.b)("a",Object(n.a)({parentName:"strong"},{href:"/contract-api/natspec/NitroAdjudicator"}),"NitroAdjudicator"),", ",Object(b.b)("a",Object(n.a)({parentName:"strong"},{href:"/contract-api/natspec/TESTForceMove"}),"TESTForceMove"))),Object(b.b)("p",null,"An implementation of ForceMove protocol, which allows state channels to be adjudicated and finalized."),Object(b.b)("hr",null),Object(b.b)("h2",{id:"contract-members"},"Contract Members"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Constants & Variables")),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"//public members\nmapping(bytes32 => bytes32) public channelStorageHashes;\n\n//internal members\nbytes internal constant prefix;\n\n")),Object(b.b)("h2",{id:"events"},"Events"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"event ChallengeRegistered(bytes32 indexed channelId, uint48  turnNumRecord, uint48  finalizesAt, address  challenger, bool  isFinal, struct IForceMove.FixedPart  fixedPart, struct ForceMoveApp.VariablePart[]  variableParts, struct IForceMove.Signature[]  sigs, uint8[]  whoSignedWhat);\nevent ChallengeCleared(bytes32 indexed channelId, uint48  newTurnNumRecord);\nevent Concluded(bytes32 indexed channelId);\n")),Object(b.b)("h2",{id:"functions"},"Functions"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#getchannelstorage"}),"getChannelStorage")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#forcemove"}),"forceMove")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#respond"}),"respond")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#checkpoint"}),"checkpoint")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#conclude"}),"conclude")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requirechallengerisparticipant"}),"_requireChallengerIsParticipant")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_isaddressinarray"}),"_isAddressInArray")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_validsignatures"}),"_validSignatures")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_acceptablewhosignedwhat"}),"_acceptableWhoSignedWhat")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_recoversigner"}),"_recoverSigner")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requirestatesupportedby"}),"_requireStateSupportedBy")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requirevalidtransitionchain"}),"_requireValidTransitionChain")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requirevalidtransition"}),"_requireValidTransition")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_bytesequal"}),"_bytesEqual")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_clearchallenge"}),"_clearChallenge")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requireincreasedturnnumber"}),"_requireIncreasedTurnNumber")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requirenondecreasedturnnumber"}),"_requireNonDecreasedTurnNumber")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requirespecificchallenge"}),"_requireSpecificChallenge")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requireongoingchallenge"}),"_requireOngoingChallenge")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requirechannelnotfinalized"}),"_requireChannelNotFinalized")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requirechannelfinalized"}),"_requireChannelFinalized")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requirechannelopen"}),"_requireChannelOpen")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_requirematchingstorage"}),"_requireMatchingStorage")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_mode"}),"_mode")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_hashchanneldata"}),"_hashChannelData")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_getchannelstorage"}),"_getChannelStorage")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_matcheshash"}),"_matchesHash")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_hashstate"}),"_hashState")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_hashoutcome"}),"_hashOutcome")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#_getchannelid"}),"_getChannelId"))),Object(b.b)("hr",null),Object(b.b)("h3",{id:"getchannelstorage"},"getChannelStorage"),Object(b.b)("p",null,"Unpacks turnNumRecord, finalizesAt and fingerprint from the channelStorageHash of a particular channel."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function getChannelStorage(bytes32 channelId) public view\nreturns(turnNumRecord uint48, finalizesAt uint48, fingerprint uint160)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"turnNumRecord A turnNum that (the adjudicator knows) is supported by a signature from each participant."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a state channel.")))),Object(b.b)("h3",{id:"forcemove"},"forceMove"),Object(b.b)("p",null,"Registers a challenge against a state channel. A challenge will either prompt another participant into clearing the challenge (via one of the other methods), or cause the channel to finalize at a specific time."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function forceMove(struct IForceMove.FixedPart fixedPart, uint48 largestTurnNum, struct ForceMoveApp.VariablePart[] variableParts, uint8 isFinalCount, struct IForceMove.Signature[] sigs, uint8[] whoSignedWhat, struct IForceMove.Signature challengerSig) public nonpayable\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Data describing properties of the state channel that do not change with state updates.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The largest turn number of the submitted states; will overwrite the stored value of ",Object(b.b)("inlineCode",{parentName:"td"},"turnNumRecord"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variableParts"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct ForceMoveApp.VariablePart[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An ordered array of structs, each decribing the properties of the state channel that may change with each state update.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinalCount"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Describes how many of the submitted states have the ",Object(b.b)("inlineCode",{parentName:"td"},"isFinal")," property set to ",Object(b.b)("inlineCode",{parentName:"td"},"true"),". It is implied that the rightmost ",Object(b.b)("inlineCode",{parentName:"td"},"isFinalCount")," states are final, and the rest are not final.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sigs"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array of signatures that support the state with the ",Object(b.b)("inlineCode",{parentName:"td"},"largestTurnNum"),". There must be one for each participant, e.g.: ","[sig-from-p0, sig-from-p1, ...]")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"whoSignedWhat"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array denoting which participant has signed which state: ",Object(b.b)("inlineCode",{parentName:"td"},"participant[i]")," signed the state with index ",Object(b.b)("inlineCode",{parentName:"td"},"whoSignedWhat[i]"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"challengerSig"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The signature of a participant on the keccak256 of the abi.encode of (supportedStateHash, 'forceMove').")))),Object(b.b)("h3",{id:"respond"},"respond"),Object(b.b)("p",null,"Repsonds to an ongoing challenge registered against a state channel."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function respond(address challenger, bool[2] isFinalAB, struct IForceMove.FixedPart fixedPart, struct ForceMoveApp.VariablePart[2] variablePartAB, struct IForceMove.Signature sig) public nonpayable\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"challenger"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The address of the participant whom registered the challenge.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinalAB"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bool","[2]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An pair of booleans describing if the challenge state and/or the response state have the ",Object(b.b)("inlineCode",{parentName:"td"},"isFinal")," property set to ",Object(b.b)("inlineCode",{parentName:"td"},"true"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Data describing properties of the state channel that do not change with state updates.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variablePartAB"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct ForceMoveApp.VariablePart","[2]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An pair of structs, each decribing the properties of the state channel that may change with each state update (for the challenge state and for the response state).")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sig"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The responder's signature on the ",Object(b.b)("inlineCode",{parentName:"td"},"responseStateHash"),".")))),Object(b.b)("h3",{id:"checkpoint"},"checkpoint"),Object(b.b)("p",null,"Overwrites the ",Object(b.b)("inlineCode",{parentName:"p"},"turnNumRecord")," stored against a channel by providing a state with higher turn number, supported by a signature from each participant."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function checkpoint(struct IForceMove.FixedPart fixedPart, uint48 largestTurnNum, struct ForceMoveApp.VariablePart[] variableParts, uint8 isFinalCount, struct IForceMove.Signature[] sigs, uint8[] whoSignedWhat) public nonpayable\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Data describing properties of the state channel that do not change with state updates.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The largest turn number of the submitted states; will overwrite the stored value of ",Object(b.b)("inlineCode",{parentName:"td"},"turnNumRecord"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variableParts"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct ForceMoveApp.VariablePart[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An ordered array of structs, each decribing the properties of the state channel that may change with each state update.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinalCount"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Describes how many of the submitted states have the ",Object(b.b)("inlineCode",{parentName:"td"},"isFinal")," property set to ",Object(b.b)("inlineCode",{parentName:"td"},"true"),". It is implied that the rightmost ",Object(b.b)("inlineCode",{parentName:"td"},"isFinalCount")," states are final, and the rest are not final.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sigs"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array of signatures that support the state with the ",Object(b.b)("inlineCode",{parentName:"td"},"largestTurnNum"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"whoSignedWhat"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array denoting which participant has signed which state: ",Object(b.b)("inlineCode",{parentName:"td"},"participant[i]")," signed the state with index ",Object(b.b)("inlineCode",{parentName:"td"},"whoSignedWhat[i]"),".")))),Object(b.b)("h3",{id:"conclude"},"conclude"),Object(b.b)("p",null,"Finalizes a channel by providing a finalization proof."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function conclude(uint48 largestTurnNum, struct IForceMove.FixedPart fixedPart, bytes32 appPartHash, bytes32 outcomeHash, uint8 numStates, uint8[] whoSignedWhat, struct IForceMove.Signature[] sigs) public nonpayable\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The largest turn number of the submitted states; will overwrite the stored value of ",Object(b.b)("inlineCode",{parentName:"td"},"turnNumRecord"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Data describing properties of the state channel that do not change with state updates.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"appPartHash"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The keccak256 of the abi.encode of ",Object(b.b)("inlineCode",{parentName:"td"},"(challengeDuration, appDefinition, appData)"),". Applies to all states in the finalization proof.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"outcomeHash"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The keccak256 of the abi.encode of the ",Object(b.b)("inlineCode",{parentName:"td"},"outcome"),". Applies to all stats in the finalization proof.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"numStates"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The number of states in the finalization proof.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"whoSignedWhat"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array denoting which participant has signed which state: ",Object(b.b)("inlineCode",{parentName:"td"},"participant[i]")," signed the state with index ",Object(b.b)("inlineCode",{parentName:"td"},"whoSignedWhat[i]"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sigs"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array of signatures that support the state with the ",Object(b.b)("inlineCode",{parentName:"td"},"largestTurnNum"),".")))),Object(b.b)("h3",{id:"_requirechallengerisparticipant"},"_requireChallengerIsParticipant"),Object(b.b)("p",null,"Checks that the challengerSignature was created by one of the supplied participants."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireChallengerIsParticipant(bytes32 supportedStateHash, address[] participants, struct IForceMove.Signature challengerSignature) internal pure\nreturns(challenger address)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"supportedStateHash"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Forms part of the digest to be signed, along with the string 'forceMove'.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"participants"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A list of addresses representing the participants of a channel.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"challengerSignature"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The signature of a participant on the keccak256 of the abi.encode of (supportedStateHash, 'forceMove').")))),Object(b.b)("h3",{id:"_isaddressinarray"},"_isAddressInArray"),Object(b.b)("p",null,"Tests whether a given address is in a given array of addresses."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _isAddressInArray(address suspect, address[] addresses) internal pure\nreturns(bool)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"true if the address is in the array, false otherwise"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"suspect"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A single address of interest.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"addresses"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A line-up of possible perpetrators.")))),Object(b.b)("h3",{id:"_validsignatures"},"_validSignatures"),Object(b.b)("p",null,"Given an array of state hashes, checks the validity of the supplied signatures. Valid means there is a signature for each participant, either on the hash of the state for which they are a mover, or on the hash of a state that appears after that state in the array."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _validSignatures(uint48 largestTurnNum, address[] participants, bytes32[] stateHashes, struct IForceMove.Signature[] sigs, uint8[] whoSignedWhat) internal pure\nreturns(bool)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"true if the signatures are valid, false otherwise"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The largest turn number of the submitted states; will overwrite the stored value of ",Object(b.b)("inlineCode",{parentName:"td"},"turnNumRecord"),".")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"participants"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A list of addresses representing the participants of a channel.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"stateHashes"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Array of keccak256(State) submitted in support of a state,")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sigs"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Array of Signatures, one for each participant")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"whoSignedWhat"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"participant","[i]"," signed stateHashes[whoSignedWhat","[i]","]")))),Object(b.b)("h3",{id:"_acceptablewhosignedwhat"},"_acceptableWhoSignedWhat"),Object(b.b)("p",null,"Given a declaration of which state in the support proof was signed by which participant, check if this declaration is acceptable. Acceptable means there is a signature for each participant, either on the hash of the state for which they are a mover, or on the hash of a state that appears after that state in the array."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _acceptableWhoSignedWhat(uint8[] whoSignedWhat, uint48 largestTurnNum, uint256 nParticipants, uint256 nStates) internal pure\nreturns(bool)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"true if whoSignedWhat is acceptable, false otherwise"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"whoSignedWhat"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"participant","[i]"," signed stateHashes[whoSignedWhat","[i]","]")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Largest turnNum of the support proof")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"nParticipants"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint256"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of participants in the channel")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"nStates"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint256"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of states in the support proof")))),Object(b.b)("h3",{id:"_recoversigner"},"_recoverSigner"),Object(b.b)("p",null,"Given a digest and ethereum digital signature, recover the signer"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _recoverSigner(bytes32 _d, struct IForceMove.Signature sig) internal pure\nreturns(address)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"signer"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"_d"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"message digest")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sig"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ethereum digital signature")))),Object(b.b)("h3",{id:"_requirestatesupportedby"},"_requireStateSupportedBy"),Object(b.b)("p",null,"Check that the submitted data constitute a support proof."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireStateSupportedBy(uint48 largestTurnNum, struct ForceMoveApp.VariablePart[] variableParts, uint8 isFinalCount, bytes32 channelId, struct IForceMove.FixedPart fixedPart, struct IForceMove.Signature[] sigs, uint8[] whoSignedWhat) internal pure\nreturns(bytes32)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"The hash of the latest state in the proof, if supported, else reverts."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Largest turnNum of the support proof")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variableParts"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct ForceMoveApp.VariablePart[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Variable parts of the states in the support proof")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinalCount"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"How many of the states are final? The final isFinalCount states are implied final, the remainder are implied not final.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Fixed Part of the states in the support proof")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sigs"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A signature from each participant.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"whoSignedWhat"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"participant","[i]"," signed stateHashes[whoSignedWhat","[i]","]")))),Object(b.b)("h3",{id:"_requirevalidtransitionchain"},"_requireValidTransitionChain"),Object(b.b)("p",null,"Check that the submitted states form a chain of valid transitions"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireValidTransitionChain(uint48 largestTurnNum, struct ForceMoveApp.VariablePart[] variableParts, uint8 isFinalCount, bytes32 channelId, struct IForceMove.FixedPart fixedPart) internal pure\nreturns(bytes32[])\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"true if every state is a validTransition from its predecessor, false otherwise."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Largest turnNum of the support proof")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variableParts"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct ForceMoveApp.VariablePart[]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Variable parts of the states in the support proof")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinalCount"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"How many of the states are final? The final isFinalCount states are implied final, the remainder are implied not final.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Fixed Part of the states in the support proof")))),Object(b.b)("h3",{id:"_requirevalidtransition"},"_requireValidTransition"),Object(b.b)("p",null,"Check that the submitted pair of states form a valid transition"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireValidTransition(uint256 nParticipants, bool[2] isFinalAB, struct ForceMoveApp.VariablePart[2] ab, uint48 turnNumB, address appDefinition) internal pure\nreturns(bool)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"true if the later state is a validTransition from its predecessor, false otherwise."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"nParticipants"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint256"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of participants in the channel.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"transition"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinalAB"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bool","[2]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Pair of booleans denoting whether the first and second state (resp.) are final.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ab"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct ForceMoveApp.VariablePart","[2]"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Variable parts of each of the pair of states")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"turnNumB"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"turnNum of the later state of the pair.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"appDefinition"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Address of deployed contract containing application-specific validTransition function.")))),Object(b.b)("h3",{id:"_bytesequal"},"_bytesEqual"),Object(b.b)("p",null,"Check for equality of two byte strings"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _bytesEqual(bytes left, bytes right) internal pure\nreturns(bool)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"true if the bytes are identical, false otherwise."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"left"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"One bytes string")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"right"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The other bytes string")))),Object(b.b)("h3",{id:"_clearchallenge"},"_clearChallenge"),Object(b.b)("p",null,"Clears a challenge by updating the turnNumRecord and resetting the remaining channel storage fields, and emits a ChallengeCleared event."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _clearChallenge(bytes32 channelId, uint48 newTurnNumRecord) internal nonpayable\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"newTurnNumRecord"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"New turnNumRecord to overwrite existing value")))),Object(b.b)("h3",{id:"_requireincreasedturnnumber"},"_requireIncreasedTurnNumber"),Object(b.b)("p",null,"Checks that the submitted turnNumRecord is strictly greater than the turnNumRecord stored on chain."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireIncreasedTurnNumber(bytes32 channelId, uint48 newTurnNumRecord) internal view\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"newTurnNumRecord"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"New turnNumRecord intended to overwrite existing value")))),Object(b.b)("h3",{id:"_requirenondecreasedturnnumber"},"_requireNonDecreasedTurnNumber"),Object(b.b)("p",null,"Checks that the submitted turnNumRecord is greater than or equal to the turnNumRecord stored on chain."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireNonDecreasedTurnNumber(bytes32 channelId, uint48 newTurnNumRecord) internal view\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"newTurnNumRecord"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"New turnNumRecord intended to overwrite existing value")))),Object(b.b)("h3",{id:"_requirespecificchallenge"},"_requireSpecificChallenge"),Object(b.b)("p",null,"Checks that a given ChannelData struct matches the challenge stored on chain, and that the channel is in Challenge mode."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireSpecificChallenge(struct IForceMove.ChannelData data, bytes32 channelId) internal view\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"data"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.ChannelData"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A given ChannelData data structure.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")))),Object(b.b)("h3",{id:"_requireongoingchallenge"},"_requireOngoingChallenge"),Object(b.b)("p",null,"Checks that a given channel is in the Challenge mode."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireOngoingChallenge(bytes32 channelId) internal view\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")))),Object(b.b)("h3",{id:"_requirechannelnotfinalized"},"_requireChannelNotFinalized"),Object(b.b)("p",null,"Checks that a given channel is NOT in the Finalized mode."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireChannelNotFinalized(bytes32 channelId) internal view\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")))),Object(b.b)("h3",{id:"_requirechannelfinalized"},"_requireChannelFinalized"),Object(b.b)("p",null,"Checks that a given channel is in the Finalized mode."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireChannelFinalized(bytes32 channelId) internal view\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")))),Object(b.b)("h3",{id:"_requirechannelopen"},"_requireChannelOpen"),Object(b.b)("p",null,"Checks that a given channel is in the Open mode."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireChannelOpen(bytes32 channelId) internal view\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")))),Object(b.b)("h3",{id:"_requirematchingstorage"},"_requireMatchingStorage"),Object(b.b)("p",null,"Checks that a given ChannelData struct matches the challenge stored on chain."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _requireMatchingStorage(struct IForceMove.ChannelData data, bytes32 channelId) internal view\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"data"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.ChannelData"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A given ChannelData data structure.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")))),Object(b.b)("h3",{id:"_mode"},"_mode"),Object(b.b)("p",null,"Computes the ChannelMode for a given channelId."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _mode(bytes32 channelId) internal view\nreturns(enum IForceMove.ChannelMode)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a channel.")))),Object(b.b)("h3",{id:"_hashchanneldata"},"_hashChannelData"),Object(b.b)("p",null,"Hashes the input data and formats it for on chain storage."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _hashChannelData(struct IForceMove.ChannelData channelData) internal pure\nreturns(newHash bytes32)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelData"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.ChannelData"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ChannelData data.")))),Object(b.b)("h3",{id:"_getchannelstorage"},"_getChannelStorage"),Object(b.b)("p",null,"Unpacks turnNumRecord, finalizesAt and fingerprint from the channelStorageHash of a particular channel."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _getChannelStorage(bytes32 channelId) internal view\nreturns(turnNumRecord uint48, finalizesAt uint48, fingerprint uint160)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"turnNumRecord A turnNum that (the adjudicator knows) is supported by a signature from each participant."),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a state channel.")))),Object(b.b)("h3",{id:"_matcheshash"},"_matchesHash"),Object(b.b)("p",null,"Checks that a given ChannelData struct matches a supplied bytes32 when formatted for storage."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _matchesHash(struct IForceMove.ChannelData data, bytes32 h) internal pure\nreturns(bool)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"data"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.ChannelData"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A given ChannelData data structure.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"h"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Some data in on-chain storage format.")))),Object(b.b)("h3",{id:"_hashstate"},"_hashState"),Object(b.b)("p",null,"Computes the hash of the state corresponding to the input data."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _hashState(uint48 turnNum, bool isFinal, bytes32 channelId, struct IForceMove.FixedPart fixedPart, bytes appData, bytes32 outcomeHash) internal pure\nreturns(bytes32)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"The stateHash"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"turnNum"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Turn number")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinal"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bool"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Is the state final?")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for the channel")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Part of the state that does not change")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"appData"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Application specific date")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"outcomeHash"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Hash of the outcome.")))),Object(b.b)("h3",{id:"_hashoutcome"},"_hashOutcome"),Object(b.b)("p",null,"Computes the hash of a given outcome."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _hashOutcome(bytes outcome) internal pure\nreturns(bytes32)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"The outcomeHash"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"outcome"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An outcome")))),Object(b.b)("h3",{id:"_getchannelid"},"_getChannelId"),Object(b.b)("p",null,"Computes the unique id of a channel."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _getChannelId(struct IForceMove.FixedPart fixedPart) internal pure\nreturns(channelId bytes32)\n")),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns")),Object(b.b)("p",null,"channelId"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Arguments")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Part of the state that does not change")))))}u.isMDXComponent=!0},420:function(e,t,a){"use strict";a.d(t,"a",(function(){return O})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),u=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},O=function(e){var t=u(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},j={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},o=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),O=u(a),o=n,d=O["".concat(l,".").concat(o)]||O[o]||j[o]||b;return a?r.a.createElement(d,c(c({ref:t},p),{},{components:a})):r.a.createElement(d,c({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,l=new Array(b);l[0]=o;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var p=2;p<b;p++)l[p]=a[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}o.displayName="MDXCreateElement"}}]);