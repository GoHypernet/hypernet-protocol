(window.webpackJsonp=window.webpackJsonp||[]).push([[360],{411:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return b})),a.d(e,"metadata",(function(){return c})),a.d(e,"rightToc",(function(){return i})),a.d(e,"default",(function(){return u}));var n=a(2),r=a(6),l=(a(0),a(420)),b={id:"NitroAdjudicator",title:"NitroAdjudicator.sol"},c={unversionedId:"contract-api/natspec/NitroAdjudicator",id:"contract-api/natspec/NitroAdjudicator",isDocsHomePage:!1,title:"NitroAdjudicator.sol",description:"View Source: contracts/NitroAdjudicator.sol",source:"@site/docs/contract-api/natspec/NitroAdjudicator.md",permalink:"/contract-api/natspec/NitroAdjudicator",sidebar:"Contract API",previous:{title:"ERC20.sol",permalink:"/contract-api/natspec/ERC20"},next:{title:"ERC20AssetHolder.sol",permalink:"/contract-api/natspec/ERC20AssetHolder"}},i=[{value:"Functions",id:"functions",children:[{value:"pushOutcome",id:"pushoutcome",children:[]},{value:"pushOutcomeAndTransferAll",id:"pushoutcomeandtransferall",children:[]},{value:"concludePushOutcomeAndTransferAll",id:"concludepushoutcomeandtransferall",children:[]},{value:"_transferAllFromAllAssetHolders",id:"_transferallfromallassetholders",children:[]},{value:"validTransition",id:"validtransition",children:[]}]}],o={rightToc:i};function u(t){var e=t.components,a=Object(r.a)(t,["components"]);return Object(l.b)("wrapper",Object(n.a)({},o,a,{components:e,mdxType:"MDXLayout"}),Object(l.b)("p",null,"View Source: ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/statechannels/monorepo/tree/master/packages/nitro-protocol/contracts/NitroAdjudicator.sol"}),"contracts/NitroAdjudicator.sol")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"\u2197 Extends: ",Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"/contract-api/natspec/Adjudicator"}),"Adjudicator"),", ",Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"/contract-api/natspec/ForceMove"}),"ForceMove")),"\n",Object(l.b)("strong",{parentName:"p"},"\u2198 Derived Contracts: ",Object(l.b)("a",Object(n.a)({parentName:"strong"},{href:"/contract-api/natspec/TESTNitroAdjudicator"}),"TESTNitroAdjudicator"))),Object(l.b)("p",null,"The NitroAdjudicator contract extends ForceMove and hence inherits all ForceMove methods, and also extends and implements the Adjudicator interface, allowing for a finalized outcome to be pushed to an asset holder."),Object(l.b)("hr",null),Object(l.b)("h2",{id:"functions"},"Functions"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#pushoutcome"}),"pushOutcome")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#pushoutcomeandtransferall"}),"pushOutcomeAndTransferAll")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#concludepushoutcomeandtransferall"}),"concludePushOutcomeAndTransferAll")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#_transferallfromallassetholders"}),"_transferAllFromAllAssetHolders")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(n.a)({parentName:"li"},{href:"#validtransition"}),"validTransition"))),Object(l.b)("hr",null),Object(l.b)("h3",{id:"pushoutcome"},"pushOutcome"),Object(l.b)("p",null,"Allows a finalized channel's outcome to be decoded and one or more AssetOutcomes registered in external Asset Holder contracts."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function pushOutcome(bytes32 channelId, uint48 turnNumRecord, uint48 finalizesAt, bytes32 stateHash, address challengerAddress, bytes outcomeBytes) public nonpayable\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a state channel")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"turnNumRecord"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A turnNum that (the adjudicator knows and stores) is supported by a signature from each participant.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"finalizesAt"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The unix timestamp when this channel will finalize")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"stateHash"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The keccak256 of the abi.encode of the State (struct) stored by the adjudicator")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"challengerAddress"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The address of the participant whom registered the challenge, if any.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"outcomeBytes"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The encoded Outcome of this state channel.")))),Object(l.b)("h3",{id:"pushoutcomeandtransferall"},"pushOutcomeAndTransferAll"),Object(l.b)("p",null,"Allows a finalized channel's outcome to be decoded and transferAll to be triggered in external Asset Holder contracts."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function pushOutcomeAndTransferAll(bytes32 channelId, uint48 turnNumRecord, uint48 finalizesAt, bytes32 stateHash, address challengerAddress, bytes outcomeBytes) public nonpayable\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a state channel")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"turnNumRecord"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"A turnNum that (the adjudicator knows and stores) is supported by a signature from each participant.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"finalizesAt"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The unix timestamp when this channel will finalize")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"stateHash"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The keccak256 of the abi.encode of the State (struct) stored by the adjudicator")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"challengerAddress"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The address of the participant whom registered the challenge, if any.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"outcomeBytes"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The encoded Outcome of this state channel.")))),Object(l.b)("h3",{id:"concludepushoutcomeandtransferall"},"concludePushOutcomeAndTransferAll"),Object(l.b)("p",null,"Finalizes a channel by providing a finalization proof, allows a finalized channel's outcome to be decoded and transferAll to be triggered in external Asset Holder contracts."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function concludePushOutcomeAndTransferAll(uint48 largestTurnNum, struct IForceMove.FixedPart fixedPart, bytes32 appPartHash, bytes outcomeBytes, uint8 numStates, uint8[] whoSignedWhat, struct IForceMove.Signature[] sigs) public nonpayable\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The largest turn number of the submitted states; will overwrite the stored value of ",Object(l.b)("inlineCode",{parentName:"td"},"turnNumRecord"),".")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Data describing properties of the state channel that do not change with state updates.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"appPartHash"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The keccak256 of the abi.encode of ",Object(l.b)("inlineCode",{parentName:"td"},"(challengeDuration, appDefinition, appData)"),". Applies to all states in the finalization proof.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"outcomeBytes"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"abi.encode of an array of Outcome.OutcomeItem structs.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"numStates"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The number of states in the finalization proof.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"whoSignedWhat"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8[]"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array denoting which participant has signed which state: ",Object(l.b)("inlineCode",{parentName:"td"},"participant[i]")," signed the state with index ",Object(l.b)("inlineCode",{parentName:"td"},"whoSignedWhat[i]"),".")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sigs"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature[]"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array of signatures that support the state with the ",Object(l.b)("inlineCode",{parentName:"td"},"largestTurnNum"),".")))),Object(l.b)("h3",{id:"_transferallfromallassetholders"},"_transferAllFromAllAssetHolders"),Object(l.b)("p",null,"Triggers transferAll in all external Asset Holder contracts specified in a given outcome for a given channelId."),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function _transferAllFromAllAssetHolders(bytes32 channelId, bytes outcomeBytes) internal nonpayable\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"channelId"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unique identifier for a state channel")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"outcomeBytes"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"abi.encode of an array of Outcome.OutcomeItem structs.")))),Object(l.b)("h3",{id:"validtransition"},"validTransition"),Object(l.b)("p",null,"Check that the submitted pair of states form a valid transition (public wrapper for internal function _requireValidTransition)"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function validTransition(uint256 nParticipants, bool[2] isFinalAB, struct ForceMoveApp.VariablePart[2] ab, uint48 turnNumB, address appDefinition) public pure\nreturns(bool)\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Returns")),Object(l.b)("p",null,"true if the later state is a validTransition from its predecessor, reverts otherwise."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Arguments")),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(l.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"nParticipants"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint256"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Number of participants in the channel.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"transition"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinalAB"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bool","[2]"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Pair of booleans denoting whether the first and second state (resp.) are final.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ab"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct ForceMoveApp.VariablePart","[2]"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Variable parts of each of the pair of states")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"turnNumB"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"turnNum of the later state of the pair.")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"appDefinition"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(l.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Address of deployed contract containing application-specific validTransition function.")))))}u.isMDXComponent=!0},420:function(t,e,a){"use strict";a.d(e,"a",(function(){return d})),a.d(e,"b",(function(){return O}));var n=a(0),r=a.n(n);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function b(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function c(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?b(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var o=r.a.createContext({}),u=function(t){var e=r.a.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):c(c({},e),t)),a},d=function(t){var e=u(t.components);return r.a.createElement(o.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.a.createElement(r.a.Fragment,{},e)}},p=r.a.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,b=t.parentName,o=i(t,["components","mdxType","originalType","parentName"]),d=u(a),p=n,O=d["".concat(b,".").concat(p)]||d[p]||s[p]||l;return a?r.a.createElement(O,c(c({ref:e},o),{},{components:a})):r.a.createElement(O,c({ref:e},o))}));function O(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,b=new Array(l);b[0]=p;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=t,c.mdxType="string"==typeof t?t:n,b[1]=c;for(var o=2;o<l;o++)b[o]=a[o];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);