(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{147:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),c=(a(0),a(420)),b={id:"IForceMove",title:"IForceMove.sol"},l={unversionedId:"contract-api/natspec/IForceMove",id:"contract-api/natspec/IForceMove",isDocsHomePage:!1,title:"IForceMove.sol",description:"View Source: contracts/interfaces/IForceMove.sol",source:"@site/docs/contract-api/natspec/IForceMove.md",permalink:"/contract-api/natspec/IForceMove",sidebar:"Contract API",previous:{title:"Outcome.sol",permalink:"/contract-api/natspec/Outcome"},next:{title:"ForceMove.sol",permalink:"/contract-api/natspec/ForceMove"}},i=[{value:"<strong>Enums</strong>",id:"enums",children:[{value:"ChannelMode",id:"channelmode",children:[]}]},{value:"Structs",id:"structs",children:[{value:"Signature",id:"signature",children:[]},{value:"FixedPart",id:"fixedpart",children:[]},{value:"State",id:"state",children:[]},{value:"ChannelData",id:"channeldata",children:[]}]},{value:"Events",id:"events",children:[]},{value:"Functions",id:"functions",children:[{value:"forceMove",id:"forcemove",children:[]},{value:"respond",id:"respond",children:[]},{value:"checkpoint",id:"checkpoint",children:[]},{value:"conclude",id:"conclude",children:[]}]}],o={rightToc:i};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"View Source: ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/statechannels/monorepo/tree/master/packages/nitro-protocol/contracts/interfaces/IForceMove.sol"}),"contracts/interfaces/IForceMove.sol")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"\u2198 Derived Contracts: ",Object(c.b)("a",Object(n.a)({parentName:"strong"},{href:"/contract-api/natspec/ForceMove"}),"ForceMove"))),Object(c.b)("p",null,"The IForceMove contract abstraction defines the interface that an implementation of ForceMove should implement. ForceMove protocol allows state channels to be adjudicated and finalized."),Object(c.b)("hr",null),Object(c.b)("h2",{id:"enums"},Object(c.b)("strong",{parentName:"h2"},"Enums")),Object(c.b)("h3",{id:"channelmode"},"ChannelMode"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"enum ChannelMode {\n Open,\n Challenge,\n Finalized\n}\n")),Object(c.b)("h2",{id:"structs"},"Structs"),Object(c.b)("h3",{id:"signature"},"Signature"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"struct Signature {\n uint8 v,\n bytes32 r,\n bytes32 s\n}\n")),Object(c.b)("h3",{id:"fixedpart"},"FixedPart"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"struct FixedPart {\n uint256 chainId,\n address[] participants,\n uint48 channelNonce,\n address appDefinition,\n uint48 challengeDuration\n}\n")),Object(c.b)("h3",{id:"state"},"State"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"struct State {\n uint48 turnNum,\n bool isFinal,\n bytes32 channelId,\n bytes32 appPartHash,\n bytes32 outcomeHash\n}\n")),Object(c.b)("h3",{id:"channeldata"},"ChannelData"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"struct ChannelData {\n uint48 turnNumRecord,\n uint48 finalizesAt,\n bytes32 stateHash,\n address challengerAddress,\n bytes32 outcomeHash\n}\n")),Object(c.b)("h2",{id:"events"},"Events"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"event ChallengeRegistered(bytes32 indexed channelId, uint48  turnNumRecord, uint48  finalizesAt, address  challenger, bool  isFinal, struct IForceMove.FixedPart  fixedPart, struct ForceMoveApp.VariablePart[]  variableParts, struct IForceMove.Signature[]  sigs, uint8[]  whoSignedWhat);\nevent ChallengeCleared(bytes32 indexed channelId, uint48  newTurnNumRecord);\nevent Concluded(bytes32 indexed channelId);\n")),Object(c.b)("h2",{id:"functions"},"Functions"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#forcemove"}),"forceMove")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#respond"}),"respond")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#checkpoint"}),"checkpoint")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#conclude"}),"conclude"))),Object(c.b)("hr",null),Object(c.b)("h3",{id:"forcemove"},"forceMove"),Object(c.b)("p",null,"Registers a challenge against a state channel. A challenge will either prompt another participant into clearing the challenge (via one of the other methods), or cause the channel to finalize at a specific time."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function forceMove(struct IForceMove.FixedPart fixedPart, uint48 largestTurnNum, struct ForceMoveApp.VariablePart[] variableParts, uint8 isFinalCount, struct IForceMove.Signature[] sigs, uint8[] whoSignedWhat, struct IForceMove.Signature challengerSig) public nonpayable\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Data describing properties of the state channel that do not change with state updates.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The largest turn number of the submitted states; will overwrite the stored value of ",Object(c.b)("inlineCode",{parentName:"td"},"turnNumRecord"),".")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variableParts"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct ForceMoveApp.VariablePart[]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An ordered array of structs, each decribing the properties of the state channel that may change with each state update.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinalCount"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Describes how many of the submitted states have the ",Object(c.b)("inlineCode",{parentName:"td"},"isFinal")," property set to ",Object(c.b)("inlineCode",{parentName:"td"},"true"),". It is implied that the rightmost ",Object(c.b)("inlineCode",{parentName:"td"},"isFinalCount")," states are final, and the rest are not final.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sigs"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature[]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array of signatures that support the state with the ",Object(c.b)("inlineCode",{parentName:"td"},"largestTurnNum"),".")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"whoSignedWhat"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8[]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array denoting which participant has signed which state: ",Object(c.b)("inlineCode",{parentName:"td"},"participant[i]")," signed the state with index ",Object(c.b)("inlineCode",{parentName:"td"},"whoSignedWhat[i]"),".")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"challengerSig"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The signature of a participant on the keccak256 of the abi.encode of (supportedStateHash, 'forceMove').")))),Object(c.b)("h3",{id:"respond"},"respond"),Object(c.b)("p",null,"Repsonds to an ongoing challenge registered against a state channel."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function respond(address challenger, bool[2] isFinalAB, struct IForceMove.FixedPart fixedPart, struct ForceMoveApp.VariablePart[2] variablePartAB, struct IForceMove.Signature sig) public nonpayable\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"challenger"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"address"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The address of the participant whom registered the challenge.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinalAB"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bool","[2]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An pair of booleans describing if the challenge state and/or the response state have the ",Object(c.b)("inlineCode",{parentName:"td"},"isFinal")," property set to ",Object(c.b)("inlineCode",{parentName:"td"},"true"),".")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Data describing properties of the state channel that do not change with state updates.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variablePartAB"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct ForceMoveApp.VariablePart","[2]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An pair of structs, each decribing the properties of the state channel that may change with each state update (for the challenge state and for the response state).")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sig"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The responder's signature on the ",Object(c.b)("inlineCode",{parentName:"td"},"responseStateHash"),".")))),Object(c.b)("h3",{id:"checkpoint"},"checkpoint"),Object(c.b)("p",null,"Overwrites the ",Object(c.b)("inlineCode",{parentName:"p"},"turnNumRecord")," stored against a channel by providing a state with higher turn number, supported by a signature from each participant."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function checkpoint(struct IForceMove.FixedPart fixedPart, uint48 largestTurnNum, struct ForceMoveApp.VariablePart[] variableParts, uint8 isFinalCount, struct IForceMove.Signature[] sigs, uint8[] whoSignedWhat) public nonpayable\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Data describing properties of the state channel that do not change with state updates.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The largest turn number of the submitted states; will overwrite the stored value of ",Object(c.b)("inlineCode",{parentName:"td"},"turnNumRecord"),".")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"variableParts"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct ForceMoveApp.VariablePart[]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An ordered array of structs, each decribing the properties of the state channel that may change with each state update.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"isFinalCount"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Describes how many of the submitted states have the ",Object(c.b)("inlineCode",{parentName:"td"},"isFinal")," property set to ",Object(c.b)("inlineCode",{parentName:"td"},"true"),". It is implied that the rightmost ",Object(c.b)("inlineCode",{parentName:"td"},"isFinalCount")," states are final, and the rest are not final.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sigs"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature[]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array of signatures that support the state with the ",Object(c.b)("inlineCode",{parentName:"td"},"largestTurnNum"),".")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"whoSignedWhat"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8[]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array denoting which participant has signed which state: ",Object(c.b)("inlineCode",{parentName:"td"},"participant[i]")," signed the state with index ",Object(c.b)("inlineCode",{parentName:"td"},"whoSignedWhat[i]"),".")))),Object(c.b)("h3",{id:"conclude"},"conclude"),Object(c.b)("p",null,"Finalizes a channel by providing a finalization proof."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-solidity"}),"function conclude(uint48 largestTurnNum, struct IForceMove.FixedPart fixedPart, bytes32 appPartHash, bytes32 outcomeHash, uint8 numStates, uint8[] whoSignedWhat, struct IForceMove.Signature[] sigs) public nonpayable\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"largestTurnNum"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint48"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The largest turn number of the submitted states; will overwrite the stored value of ",Object(c.b)("inlineCode",{parentName:"td"},"turnNumRecord"),".")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"fixedPart"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.FixedPart"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Data describing properties of the state channel that do not change with state updates.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"appPartHash"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The keccak256 of the abi.encode of ",Object(c.b)("inlineCode",{parentName:"td"},"(challengeDuration, appDefinition, appData)"),". Applies to all states in the finalization proof.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"outcomeHash"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"bytes32"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The keccak256 of the abi.encode of the ",Object(c.b)("inlineCode",{parentName:"td"},"outcome"),". Applies to all stats in the finalization proof.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"numStates"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The number of states in the finalization proof.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"whoSignedWhat"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"uint8[]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array denoting which participant has signed which state: ",Object(c.b)("inlineCode",{parentName:"td"},"participant[i]")," signed the state with index ",Object(c.b)("inlineCode",{parentName:"td"},"whoSignedWhat[i]"),".")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"sigs"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"struct IForceMove.Signature[]"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"An array of signatures that support the state with the ",Object(c.b)("inlineCode",{parentName:"td"},"largestTurnNum"),".")))))}p.isMDXComponent=!0},420:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return O}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,b=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),s=p(a),u=n,O=s["".concat(b,".").concat(u)]||s[u]||d[u]||c;return a?r.a.createElement(O,l(l({ref:t},o),{},{components:a})):r.a.createElement(O,l({ref:t},o))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,b=new Array(c);b[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,b[1]=l;for(var o=2;o<c;o++)b[o]=a[o];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);