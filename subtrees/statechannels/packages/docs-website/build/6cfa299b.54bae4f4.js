(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{215:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));var a=t(2),r=t(6),o=(t(0),t(420)),i={id:"hook-up-messaging",title:"Hook up your messaging layer"},s={unversionedId:"app-devs/hook-up-messaging",id:"app-devs/hook-up-messaging",isDocsHomePage:!1,title:"Hook up your messaging layer",description:"Although our wallet implementation does most of the heavy lifting involved in managing your state channels, one thing it does not take responsibility for is message routing. For now, you must handle this in your Dapp.",source:"@site/docs/app-devs/hook-up-messaging.md",permalink:"/app-devs/hook-up-messaging",lastUpdatedBy:"Caleb Ditchfield",lastUpdatedAt:1600126133,sidebar:"docs",previous:{title:"Quick start (Dapp)",permalink:"/app-devs/quick-start-dapp"},next:{title:"Make Wallet API calls",permalink:"/app-devs/make-api-calls"}},l=[],c={rightToc:l};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Although our wallet implementation does most of the heavy lifting involved in managing your state channels, one thing it does ",Object(o.b)("em",{parentName:"p"},"not")," take responsibility for is message routing. For now, you must handle this in your Dapp."),Object(o.b)("p",null,"To do so, you should"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Subscribe to outbound messages using the channel client's ",Object(o.b)("inlineCode",{parentName:"p"},"onMessageQueued")," method. The wallet will emit events containing messages for counterparties in the state channel. When such a message is emitted, you need to route it to its recipient.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Push inbound messages into the wallet using the channel client's ",Object(o.b)("inlineCode",{parentName:"p"},"pushMessage")," method."))),Object(o.b)("p",null,"Here's an example using a cloud database (",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://firebase.google.com/"}),"Google firebase"),') to route messages to and from a participant we call "hub":'),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import {ChannelClient} from '@statechannels/channel-client';\nconst channelClient = new ChannelClient(window.channelProvider);\n\n// Boilerplate to setup a connection to firebase\nfirebase.initializeApp(fireBaseConfig);\n\n// An inbox for me\nconst myFirebaseRef = firebase.database().ref(`${myAddress}`);\n\n// An inbox for the hub\nconst hubFirebaseRef = firebase.database().ref(`${hubAddress}`);\n\n// More boilerplate to keep the db clean\nmyFirebaseRef.onDisconnect().remove();\n\nchannelClient.onMessageQueued((message: Message) => {\n  if (message.recipient === hubAddress) {\n    // Outbound message for the hub? Place in the hub's inbox\n    hubFirebaseRef.push(message);\n  }\n});\n\nmyFirebaseRef.on('child_added', async snapshot => {\n  const key = snapshot.key;\n  const message = snapshot.val();\n  // Clean up\n  myFirebaseRef.child(key).remove();\n  // Inbound message for me? Push into my wallet.\n  await channelClient.pushMessage(message);\n});\n")))}p.isMDXComponent=!0},420:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),p=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},m=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,d=u["".concat(i,".").concat(m)]||u[m]||b[m]||o;return t?r.a.createElement(d,s(s({ref:n},c),{},{components:t})):r.a.createElement(d,s({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);