(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{420:function(e,t,n){"use strict";n.d(t,"a",(function(){return h})),n.d(t,"b",(function(){return f}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},h=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),h=p(n),d=a,f=h["".concat(r,".").concat(d)]||h[d]||u[d]||i;return n?o.a.createElement(f,c(c({ref:t},s),{},{components:n})):o.a.createElement(f,c({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<i;s++)r[s]=n[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),o=n(6),i=(n(0),n(420)),r={id:"finalize-a-channel-happy",title:"Finalize a channel (happy)"},c={unversionedId:"protocol-tutorial/finalize-a-channel-happy",id:"protocol-tutorial/finalize-a-channel-happy",isDocsHomePage:!1,title:"Finalize a channel (happy)",description:"Finalization of a state channel is a necessary step before defunding it. In the so-called 'happy' case, all participants cooperate to achieve this.",source:"@site/docs/protocol-tutorial/finalize-a-channel-happy.md",permalink:"/protocol-tutorial/finalize-a-channel-happy",lastUpdatedBy:"Caleb Ditchfield",lastUpdatedAt:1600126133,sidebar:"docs",previous:{title:"Deposit Assets",permalink:"/protocol-tutorial/deposit-assets"},next:{title:"Finalize a channel (sad)",permalink:"/protocol-tutorial/finalize-a-channel-sad"}},l=[{value:"Call <code>conclude</code>",id:"call-conclude",children:[]}],s={rightToc:l};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Finalization of a state channel is a necessary step before defunding it. In the so-called 'happy' case, all participants cooperate to achieve this."),Object(i.b)("p",null,"A participant wishing to end the state channel will sign a state with ",Object(i.b)("inlineCode",{parentName:"p"},"isFinal = true"),". Then, the other participants may support that state. Once a full set of ",Object(i.b)("inlineCode",{parentName:"p"},"n")," such signatures exists (this set is known as a ",Object(i.b)("strong",{parentName:"p"},"finalization proof"),") the channel is said to be 'closed' or 'finalized'."),Object(i.b)("p",null,"In most cases, the channel would be finalized and defunded ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/protocol-tutorial/off-chain-funding"}),"off chain"),", and no contract calls are necessary."),Object(i.b)("h2",{id:"call-conclude"},"Call ",Object(i.b)("inlineCode",{parentName:"h2"},"conclude")),Object(i.b)("p",null,"In the case where assets were deposited against the channel on chain (the case of direct funding), anyone in possession of a finalization proof may use it to finalize the ",Object(i.b)("inlineCode",{parentName:"p"},"outcome")," on-chain. They would do this by calling ",Object(i.b)("inlineCode",{parentName:"p"},"conclude")," on the adjudicator. This enables ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/protocol-tutorial/release-assets"}),"assets to be released"),"."),Object(i.b)("p",null,"The conclude method allows anyone with sufficient off-chain state to immediately finalize an outcome for a channel without having to wait for a challenge to expire (more on that later)."),Object(i.b)("p",null,"The off-chain state(s) is submitted (in an optimized format), and once relevant checks have passed, an expired challenge is stored against the ",Object(i.b)("inlineCode",{parentName:"p"},"channelId"),". (This is an implementation detail -- the important point is that the chain shows that the channel has been finalized.)"),Object(i.b)("p",null,"In the following example the participants support the state by countersigning it, without increasing the turn number:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// In lesson6.test.ts\n\n/* Import ethereum wallet utilities  */\nimport {ethers} from 'ethers';\nconst {bigNumberify} = ethers.utils;\nconst {AddressZero, HashZero} = ethers.constants;\n\n/* Import statechannels wallet utilities  */\nimport {\n  Channel,\n  State,\n  getFixedPart,\n  hashOutcome,\n  signStates,\n  hashAppPart\n} from '@statechannels/nitro-protocol';\n\n/* Construct a final state */\nconst participants = [];\nconst wallets: ethers.Wallet[] = [];\nfor (let i = 0; i < 3; i++) {\n  wallets[i] = ethers.Wallet.createRandom();\n  participants[i] = wallets[i].address;\n}\nconst chainId = '0x1234';\nconst channelNonce = bigNumberify(0).toHexString();\nconst channel: Channel = {chainId, channelNonce, participants};\nconst largestTurnNum = 4;\nconst state: State = {\n  isFinal: true,\n  channel,\n  outcome: [],\n  appDefinition: AddressZero,\n  appData: HashZero,\n  challengeDuration: 1,\n  turnNum: largestTurnNum\n};\n\n/* Generate a finalization proof */\nconst whoSignedWhat = [0, 0, 0];\nconst sigs = await signStates([state], wallets, whoSignedWhat);\n\n/*\n  Call conclude\n*/\nconst numStates = 1;\nconst fixedPart = getFixedPart(state);\nconst appPartHash = hashAppPart(state);\nconst outcomeHash = hashOutcome(state.outcome);\nconst tx = NitroAdjudicator.conclude(\n  largestTurnNum,\n  fixedPart,\n  appPartHash,\n  outcomeHash,\n  numStates,\n  whoSignedWhat,\n  sigs\n);\n")),Object(i.b)("p",null,"Notice we imported ",Object(i.b)("inlineCode",{parentName:"p"},"hashOutcome")," and ",Object(i.b)("inlineCode",{parentName:"p"},"hashAppPart")," in order to provide the ",Object(i.b)("inlineCode",{parentName:"p"},"conclude")," method with the correct calldata."))}p.isMDXComponent=!0}}]);