title Existing Channel: Consumer Pays Provider

participantgroup Consumer Galileo Instance
participant Consumer UI
participant Consumer Agent
participant Consumer Core
participant Consumer Nitro
end

participant 3Box

participantgroup Provider Galileo Instance
participant Provider Nitro
participant Provider Core
participant Provider Agent
participant Provider UI
end

Consumer UI->Consumer Agent:makePayment(amount, walletAddr)
activate Consumer Agent
Consumer Agent->Consumer Core:paymentService.pay(amount, walletAddr)
deactivate Consumer Agent

activate Consumer Core
Consumer Core->3Box:space.getStorage()
deactivate Consumer Core

activate 3Box
3Box->Consumer Core:(channel info)
deactivate 3Box

activate Consumer Core
Consumer Core->Consumer Core:checkSanity()
Consumer Core->Consumer Nitro:pay(channelObject, amountToPay)
deactivate Consumer Core

activate Consumer Nitro
Consumer Nitro->Consumer Nitro:updateChannel()
Consumer Nitro->Consumer Core:callback: onMessageQueued(message)
deactivate Consumer Nitro

activate Consumer Core
Consumer Core->3Box:space.storeMessage(message)
deactivate Consumer Core


space

Provider Core->3Box:space.getStorage()
activate 3Box
3Box->Provider Core:(channel info)
deactivate 3Box

activate Provider Core
Provider Core->Provider Core:checkForChannelUpdate()
Provider Core->Provider Nitro:pushMessage(message)
deactivate Provider Core

activate Provider Nitro
Provider Nitro->Provider Core:callback: onChannelUpdated(channelState)
deactivate Provider Nitro

activate Provider Core
Provider Core->Provider Agent:callback: receivedPayment(amount, walletAddr)
deactivate Provider Core

activate Provider Agent
Provider Agent->Provider UI:updateUI()
deactivate Provider Agent

activate Provider UI
Provider UI->Provider UI:UI Notification
deactivate Provider UI
