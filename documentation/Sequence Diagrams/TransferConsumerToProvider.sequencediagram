title Basic A->B Transfer Golden Path (Channel Exists)


participant Galileo Server
participant Consumer Agent
participant Con HC Agent API
participant Con HC Nitro API
participant Con HC 3Box API
participant Con HC Logic
participant Con HC Agent Repo
participant Con HC Nitro Repo
participant Con HC 3Box Repo
participant Con Nitro
participant Blockchain
participant 3Box
participant Pro HC 3Box API
participant Pro HC Logic
participant Pro HC Nitro Repo
participant Pro Nitro
participant Pro HC Nitro API

Galileo Server->Consumer Agent:pay B 3
Consumer Agent->Con HC Agent API:pay(3, "provider_wallet")\nSends 3 dai to the provider. Called with intent, we've already asked the user
activate Con HC Agent API
Con HC Agent API->Con HC Logic:PaymentService.pay(3, "provider wallet")
activate Con HC Logic
Con HC Logic->Con HC 3Box Repo:GetChannel("consumer_wallet", "provider_wallet) -> Channel
activate Con HC 3Box Repo
Con HC Logic<-Con HC 3Box Repo:Channel
deactivate Con HC 3Box Repo
Con HC Logic->Con HC Logic:checkSanity()\nMakes sure the balances and rules are valid
Con HC Nitro Repo<-Con HC Logic:pay(3, "provider wallet"
activate Con HC Nitro Repo
deactivate Con HC Logic
Con HC Nitro Repo->Con HC Nitro Repo:Calculate a proposed state\nToken allocations

Con HC Nitro Repo->Con Nitro:updateChannel()

activate Con Nitro
Con HC Nitro Repo<-Con Nitro:Promise[ChannelResult]
deactivate Con HC Nitro Repo
Con HC Nitro API<-Con Nitro:messageQueued()

activate Con HC Nitro API

deactivate Con HC Nitro Repo
deactivate Con Nitro
Con HC Nitro API->Con HC Logic:sendMessage()
deactivate Con HC Nitro API
activate Con HC Logic
Con HC Logic->Con HC 3Box Repo:sendMessage(B, message_body)
activate Con HC 3Box Repo
deactivate Con HC Logic
Con HC 3Box Repo->3Box:space.storeMessageData()
activate 3Box
deactivate Con HC 3Box Repo
3Box->Pro HC 3Box API:OnRecieveMessage()\nProblably implemented via polling
activate Pro HC 3Box API
deactivate 3Box
Pro HC 3Box API->Pro HC Logic:processMessage(A, message_body)
deactivate Pro HC 3Box API
activate Pro HC Logic
Pro HC Logic->Pro HC Nitro Repo:pushMessage()
deactivate Pro HC Logic
activate Pro HC Nitro Repo
Pro HC Nitro Repo->Pro Nitro:pushMessage()
deactivate Pro HC Nitro Repo
activate Pro Nitro
Pro Nitro->Pro HC Nitro API:onChannelUpdated
deactivate Pro Nitro
activate Pro HC Nitro API
Pro HC Logic<-Pro HC Nitro API:channelUpdated()
deactivate Pro HC Nitro API
activate Pro HC Logic