generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["connectOrCreate"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = ["postgresql", "sqlite"]
  url = "***"
}

model Balance {
  @@map(name: "balance")
  participant      String
  assetId          String
  to               String
  amount           String
  processedDeposit String
  Channel          Channel @relation(fields: [channelAddress], references: [channelAddress])
  channelAddress   String
  @@id([participant, channelAddress, assetId])
}

model Channel {
  @@map(name: "channel")
  channelAddress              String    @id
  publicIdentifierA           String
  publicIdentifierB           String
  participantA                String
  participantB                String
  assetIds                    String
  timeout                     String
  nonce                       Int
  merkleRoot                  String
  balances                    Balance[]
  channelFactoryAddress       String
  channelMastercopyAddress    String
  transferRegistryAddress     String
  chainId                     Int
  providerUrl                 String
  latestUpdate                Update

  activeTransfers             Transfer[]

  @@unique([publicIdentifierA, publicIdentifierB, chainId])
  @@unique([participantA, participantB, chainId])
}

model Update {
  @@map(name: "update")
  // COMMON PARAMS
  channelAddress   String?
  channel          Channel? @relation(fields: [channelAddress], references: [channelAddress])
  channelAddressId String // required for ID so that relation can be removed

  fromIdentifier String
  toIdentifier   String
  type           String
  nonce          Int

  // balance
  amountA String
  amountB String
  toA     String
  toB     String

  assetId    String
  signatureA String?
  signatureB String?

  // DETAILS
  // deposit details
  totalDepositedA String?
  totalDepositedB String?

  // create details
  transferAmountA      String?
  transferAmountB      String?
  transferToA          String?
  transferToB          String?
  transferId           String?
  transferDefinition   String?
  transferTimeout      String?
  transferInitialState String? // JSON string
  transferEncodings    String?
  merkleProofData      String? // proofs.join(",")
  meta                 String?
  responder            String?

  // resolve details
  transferResolver String?
  merkleRoot       String?

  // setup inferred from channel params

  createdTransfer  Transfer? @relation("CreatedTransfer")
  resolvedTransfer Transfer? @relation("ResolvedTransfer")

  @@id([channelAddressId, nonce])
}

model Transfer {
  @@map(name: "transfer")
  transferId String @id
  routingId  String

  createUpdate  Update? @relation(name: "CreatedTransfer", fields: [createUpdateChannelAddressId, createUpdateNonce], references: [channelAddressId, nonce])
  resolveUpdate Update? @relation(name: "ResolvedTransfer", fields: [resolveUpdateChannelAddressId, resolveUpdateNonce], references: [channelAddressId, nonce])

  // balance
  amountA String
  amountB String
  toA     String
  toB     String

  initialStateHash String

  channel        Channel? @relation(fields: [channelAddress], references: [channelAddress])
  channelAddress String?
  channelAddressId String // required for ID so that relation can be removed

  // created will always exist
  createUpdateChannelAddressId String?
  createUpdateNonce            Int?

  // resolved will not always exist
  resolveUpdateChannelAddressId String?
  resolveUpdateNonce            Int?

  @@unique([routingId, channelAddressId])
}

model EventSubscription {
  @@map(name: "event-subscription")
  id    String @id @default(uuid())
  event String @unique
  url   String
}

model OnchainTransaction {
  @@map(name: "onchain-transaction")

  // Response fields
  transactionHash   String @id
  to                String
  from              String
  data              String
  value             String
  chainId           Int
  nonce             Int
  gasLimit          String
  gasPrice          String

  // Receipt fields
  timestamp         String?
  raw               String?
  blockHash         String?
  blockNumber       Int?
  contractAddress   String?
  transactionIndex  Int?
  root              String?
  gasUsed           String?
  logsBloom         String?
  logs              String?
  cumulativeGasUsed String?
  byzantium         Boolean?

  // Channel fields
  status            String @default("submitted") // no enums
  reason            String // no enums
  error             String?
  channelAddress    String
  channel           Channel @relation(fields: [channelAddress], references: [channelAddress])

  @@unique(transactionHash)
  @@unique([from, nonce])
}
